import Browser from "./js/browser";import Icons from "./js/icon";import defaultOptions from "./js/options";import Dom from "./js/dom";import Controls from "./js/controls";import Fullscreen from "./js/fullscreen";import Event from "./js/event";import load from "./js/load";import Flash from "./js/flash";import Bar from "./js/bar";import TimeBar from "./js/time-bar";import Storage from "./js/storage";import HotKey from "./js/hotKey";import Notice from "./js/notice";import utils from "./js/utils";let Index = 0;const Instances = [];export default class Player {  constructor(option) {    this.index = Index++;    this.option = defaultOptions(option);    this.container = this.option.container;    this.paused = true;    this.browser = new Browser();    this.event = new Event();    this.tel = new Dom(this.option);    this.control = new Controls(this);    this.full = new Fullscreen(this);    this.bar = new Bar(this.tel);    this.TimeBar = new TimeBar(this.tel);    this.storage = new Storage(this);    this.hotKey = new HotKey(this);    this.notice = new Notice(this);    if (this.browser.isMSIE) {      this.option.mode = "flash";    }    this.createVideo();    document.addEventListener(      "click",      () => {        this.IsFocus = false;      },      true    );    this.container.addEventListener(      "click",      () => {        this.IsFocus = true;      },      true    );    if (this.option.autoplay && this.mode) {      this.play();    }    console.warn(this);    Instances.push(this);  }  get video() {    return this.tel.video;  }  get mode() {    return this.option.mode == "html5";  }  pause() {    this.paused = true;    this.tel.PlayBtn.innerHTML = Icons.Play;    this.container.classList.remove("player-paused");    if (!this.mode) {      this.Flash.pause();      return false;    }    this.video.pause();    // if (this.type == "flv") {    //   this.flvPlayer.unload();    // }  }  play() {    this.paused = false;    this.tel.PlayBtn.innerHTML = Icons.Pause;    this.container.classList.add("player-playing");    if (!this.mode) {      this.Flash.play();      return false;    }    this.video.play().catch(() => {      this.pause();    });    if (this.type == "flv") {      this.flvPlayer.play();    }  }  volume(val, isStorage, isNotice) {    const modeType = this.mode ? "video" : "Flash";    if (!isNaN(val)) {      val = Math.max(val, 0);      val = Math.min(val, 1);      this.bar.set(val);      this[modeType].volume = val;      if (this[modeType].muted) {        this[modeType].muted = false;      }      if (!isStorage) {        this.storage.volume = val;      }      if (!isNotice) {        this.notice.notice(`音量:${(val * 100).toFixed(0)}%`);      }    }    return this[modeType].volume;  }  seek(time) {    const video = this.mode ? this.video : this.Flash;    time = Math.max(time, 0);    if (video.duration) {      time = Math.min(time, video.duration);    }    video.currentTime = time;    if (video.currentTime < time) {      this.notice.notice(`快进：${time.toFixed(0)}秒`);    } else if (video.currentTime > time) {      this.notice.notice(`后退：${time.toFixed(0)}秒`);    }  }  switchMuted() {    const modeType = this.mode ? "video" : "Flash";    const muted = this[modeType].muted;    if (muted) {      this[modeType].muted = false;      this.tel.VolumeBtn.innerHTML = Icons.Volume;      this.volume(this.storage.volume, true);    } else {      this.volume(0, true);      this[modeType].muted = true;      this.tel.VolumeBtn.innerHTML = Icons.Mute;    }  }  switch() {    if (this.paused) {      this.play();    } else {      this.pause();    }  }  async loadScript(type, cb) {    try {      let src = this.option.publicPath + this.option.defaultScriptPath[type];      await load(src);      cb && cb();    } catch (e) {}  }  createMSE() {    const videoDom = this.video;    const type = (this.type = this.option.video.type);    switch (type) {      case "flv":        if (flvjs && flvjs.isSupported()) {          flvjs.LoggingControl.enableAll = this.option.debug;          const flvPlayer = (this.flvPlayer = flvjs.createPlayer({            type: "flv",            isLive: this.option.live,            url: this.option.video.src          }));          flvPlayer.attachMediaElement(this.video);          flvPlayer.load();        } else {          this.option.mode = "flash";          this.createVideo();        }        break;      case "hls":        if (Hls && Hls.isSupported()) {          const hls = new Hls({            debug: this.option.debug          });          hls.loadSource(this.option.video.src);          hls.attachMedia(this.video);        } else {          this.option.mode = "flash";          this.createVideo();        }        break;    }  }  createFlash() {    this.Flash = new Flash(this);  }  createVideo() {    const mode = this.option.mode;    switch (mode) {      case "html5":        this.createMSE();        this.createVideoEvent();        this.event.emit("load");        break;      case "flash":        this.createFlash();        this.createVideoEvent();        break;    }  }  createVideoEvent() {    if (this.mode) {      for (let i = 0; i < this.event.playeEvent.length; i++) {        this.video.addEventListener(this.event.playeEvent[i], e => {          this.event.emit(this.event.playeEvent[i], e);        });      }    }    this.on("durationchange", () => {      const video = this.mode ? this.video : this.Flash;      if (video.duration !== 1 && video.duration !== Infinity) {        this.tel.endtime.innerHTML = utils.secondToTime(video.duration);      }    });    this.on("timeupdate", () => {      const video = this.mode ? this.video : this.Flash;      const currentTime = utils.secondToTime(video.currentTime);      if (this.tel.starttime.innerHTML !== currentTime) {        this.tel.starttime.innerHTML = currentTime;      }      this.bar.setPlayed(video.currentTime / video.duration);    });    this.on("play", () => {      if (this.paused) {        this.play();      }    });    this.on("playing", () => {      console.warn("playing");    });    this.on("progress", () => {      const percentage = this.video.buffered.length        ? this.video.buffered.end(this.video.buffered.length - 1) /          this.video.duration        : 0;      this.bar.setLoadProgress(percentage);    });    this.on("ended", () => {      if (!this.option.loop) {        this.pause();        if (!this.mode) {          this.seek(0);        }        if (this.type == "flv") {          this.flvPlayer.unload();        }      } else {        this.pause();        this.seek(0);        this.play();      }    });    this.on("pause", () => {      if (!this.paused) {        this.pause();      }    });    this.on("load", () => {      if (!this.option.muted) {        this.volume(this.storage.volume, true, true);      }      // setInterval(()=>{      //   const test=[      //       'buffered',      //       'bufferedBytesEnd',      //     ];      //   test.map((item)=>{      //     console.warn(this.Flash.FlashDom.vjs_getProperty(item),item)      //   })      //      // },250)    });  }  on(key, fn) {    this.event.on(key, fn);  }  destroy() {    Instances.splice(Instances.indexOf(this), 1);    Index--;    this.pause();    if (this.type == "flv") {      this.flvPlayer.destroy();    }    this.events.off();    this.video.src = "";    this.container.innerHTML = "";  }}