import Browser from './js/browser';import Icons from './js/icon';import defaultOptions from './js/options';import Dom from './js/dom';import Controls from './js/controls';import Fullscreen from './js/fullscreen';import Event from './js/event';import load from './js/load';import Flash from './js/flash';import Html5 from './js/html5'import Bar from './js/bar';import SettingPanel  from './js/SettingPanel'import TimeBar from './js/time-bar';import Storage from './js/storage';import HotKey from './js/hotKey';import Notice from './js/notice';import utils from './js/utils';let Index = 0;const Instances = [];export default class Player {  constructor(option) {    this.index = Index++;    this.option = defaultOptions(option);    this.container = this.option.container;    this.paused = true;    this.browser = new Browser();    this.event = new Event();    this.tel = new Dom(this);    this.control = new Controls(this);    this.full = new Fullscreen(this);    this.bar = new Bar(this.tel);    this.setting=new SettingPanel(this)    this.TimeBar = new TimeBar(this);    this.storage = new Storage(this);    this.hotKey = new HotKey(this);    this.notice = new Notice(this);    if (this.storage.mode){      this.option.mode=this.storage.mode;    }    if (this.browser.isMSIE) {      this.option.mode = 'flash';    }    this.init();    document.addEventListener(        'click',        () => {          this.IsFocus = false;        },        true    );    this.container.addEventListener(        'click',        () => {          this.IsFocus = true;        },        true    );    if (this.option.autoplay) {      this.play();    }    Instances.push(this);    if (this.option.islive) {      this.container.classList.add('player-liveing');    }  }  get video() {    return this.tel.video;  }  get mode() {    return this.option.mode == 'html5';  }  pause(isRecordingTime) {    this.paused = true;    this.tel.PlayBtn.innerHTML = Icons.Play;    this.container.classList.remove('player-paused', 'player-loading', 'player-playing');    this.TimeBar.disableloading();    const video =this.players;    video.pause();  }  play() {    this.paused = false;    this.tel.PlayBtn.innerHTML = Icons.Pause;    this.container.classList.add('player-playing');    this.TimeBar.enableloading();    const video =this.players;    video.play().catch(() => {      this.pause();    });  }  volume(val, isStorage, isNotice) {    const video =this.players;    if (!isNaN(val)) {      val = Math.max(val, 0);      val = Math.min(val, 1);      this.bar.set(val);      video.volume = val;      if (video.muted) {        video.muted = false;      }      if (!isStorage) {        this.storage.volume = val;      }      if (!isNotice) {        this.notice.notice(`音量:${(val * 100).toFixed(0)}%`);      }    }    return video.volume;  }  src(src) {    if (!src) return false;    const video = this.players;    if (this.mode) {      video.type == 'flv' && video.flv.unload();      video.src = '';      video.src = src;      video.type == 'flv' && video.flv.load();    } else {      video.src(src);    }    return video.currentSrc;  }  refresh(){    this.tel.RefreshBtn.classList.add('player-animation-rotate')    this.pause();    const src=this.option.src;    this.src(src);    utils.sleep(200).then(()=>{      this.play();      this.tel.RefreshBtn.classList.remove('player-animation-rotate')    })  }  seek(time) {    const video = this.players;    time = Math.max(time, 0);    if (video.duration) {      time = Math.min(time, video.duration);    }    video.currentTime = time;    if (video.currentTime < time) {      this.notice.notice(`快进：${time.toFixed(0)}秒`);    } else if (video.currentTime > time) {      this.notice.notice(`后退：${time.toFixed(0)}秒`);    }  }  switchMuted() {    const video = this.players;    const muted = video.muted;    if (muted) {      video.muted = false;      this.tel.VolumeBtn.innerHTML = Icons.Volume;      this.volume(this.storage.volume, true);    } else {      this.volume(0, true);      video.muted = true;      this.tel.VolumeBtn.innerHTML = Icons.Mute;    }  }  switch() {    if (this.paused) {      this.play();    } else {      this.pause();    }  }  init(clear=false) {    const mode = this.option.mode;    switch (mode) {      case 'html5':          const html5=new Html5(this,clear);          this.players=html5;          html5.init().then(this.initEvent.bind(this)).catch(this.initFlashError.bind(this))        break;      case 'flash':        const flash=new Flash(this,clear);        this.players=flash;        flash.init().then(this.initEvent.bind(this)).catch(this.initFlashError.bind(this));        break;    }    this.storage.mode=this.option.mode;    this.setting.changeActive(mode);  }  initFlashError(){    console.warn('initFlashError')  }  initEvent() {    this.on('durationchange', () => {      const video =this.players      if (video.duration !== 1 && video.duration !== Infinity) {        this.tel.endtime.innerHTML = utils.secondToTime(video.duration);      }    });    this.on('timeupdate', () => {      if (this.option.islive) {        return false;      }      const video =this.players      const currentTime = utils.secondToTime(video.currentTime);      if (this.tel.starttime.innerHTML !== currentTime) {        this.tel.starttime.innerHTML = currentTime;      }      this.bar.setPlayed(video.currentTime / video.duration);    });    this.on('play', () => {      if (this.paused) {        this.play();      }    });    this.on('playing', () => {      console.warn(this)      console.warn('playing');    });    this.on('progress', () => {      const video =this.players;      const percentage = video.buffered.length          ? video.buffered.end(video.buffered.length - 1) /          video.duration          : 0;      if (!this.option.islive) {        this.bar.setLoadProgress(percentage);      }    });    this.on('ended', () => {      if (!this.option.loop) {        this.pause();        if (!this.mode) {          this.seek(0);        }      } else {        this.pause();        this.seek(0);        this.play();      }    });    this.on('pause', () => {      if (!this.paused) {        this.pause();      }    });    this.on('ready', () => {      if (!this.option.muted) {        this.volume(this.storage.volume, true, true);      }      utils.sleep(1000).then(()=>{        this.tel.loading.style.display='none';      })    });    this.on('canplay', () => {      this.container.classList.remove('player-loading');    });    this.on('waiting', () => {      if (!this.paused) {        this.container.classList.add('player-loading');      }    });    this.on('error', () => {      console.warn('error');    });  }  on(key, fn) {    this.event.on(key, fn);  }  isSupported() {    if (!this.mode) {      return this.Flash.isSupported();    }  }  destroy() {    this.pause();    this.players.destroy()    this.event.off();    this.container.innerHTML = '';    Instances.splice(Instances.indexOf(this), 1);    Index--;  }}