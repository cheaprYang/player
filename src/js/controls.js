import utils from "./utils";import Icons from "./icon";export default class Controls {  constructor(player) {    this.player = player;    this.settingShow = false;    this.initPlayBtn();    this.initVolumeBtn();    this.initFullScBtn();    this.initTimeBar();    this.initSetingBtn();    // this.initContext()  }  initPlayBtn() {    this.player.tel.PlayBtn.addEventListener(      "click",      () => {        this.player.switch();      },      false    );  }  initVolumeBtn() {    const VolumeMove = e => {      const evt = e || window.event;      const Thumb = this.player.tel.ThumbBtn;      const offleft = utils.getElementViewLeft(this.player.tel.VolumeBarLine);      const percentage = evt.clientX - offleft;      this.player.volume(percentage / 100);    };    const VolumeUp = () => {      document.removeEventListener("mousemove", VolumeMove);      document.removeEventListener("mouseup", VolumeUp);    };    this.player.tel.ThumbBtn.addEventListener(      "mousedown",      e => {        document.addEventListener("mousemove", VolumeMove);        document.addEventListener("mouseup", VolumeUp);      },      false    );    this.player.tel.VolumeBar.addEventListener("click", VolumeMove);    this.player.tel.VolumeBtn.addEventListener(      "click",      () => {        this.player.switchMuted();      },      false    );  }  initFullScBtn() {    this.player.tel.Full.addEventListener(      "click",      () => {        this.player.full.switch();      },      false    );  }  initTimeBar() {    const timeBarMove = e => {      const evt = e || window.event;      const Thumb = this.player.tel.ThumbBtn;      const offleft = utils.getElementViewLeft(this.player.tel.timeBarLine);      const width = this.player.tel.timeBar.offsetWidth;      let percentage = (evt.clientX - offleft) / width;      percentage = Math.max(percentage, 0);      percentage = Math.min(percentage, 1);      this.player.bar.setPlayed(percentage);      const video = this.player.mode ? this.player.video : this.player.Flash;      this.player.seek(percentage * video.duration);    };    const timeBarUp = e => {      document.removeEventListener("mousemove", timeBarMove);      document.removeEventListener("mouseup", timeBarUp);    };    this.player.tel.timeBarThumb.addEventListener(      "mousedown",      e => {        document.addEventListener("mousemove", timeBarMove);        document.addEventListener("mouseup", timeBarUp);      },      false    );    this.player.tel.timeBar.addEventListener("click", e => {      timeBarMove(e);    });  }  initSetingBtn() {    this.player.tel.SettingBtn.addEventListener(      "click",      () => {        this.switchSeting();      },      false    );    this.player.tel.ClickMask.addEventListener(      "click",      () => {        this.switchSeting();      },      false    );  }  switchSeting() {    if (this.settingShow) {      this.settingShow = false;      this.player.tel.SettingPanel.classList.remove("player-setting-show");      document.querySelector(".js-click-mask").classList.remove("player-show");    } else {      this.settingShow = true;      this.player.tel.SettingPanel.classList.add("player-setting-show");      document.querySelector(".js-click-mask").classList.add("player-show");    }  }  initContext() {    this.player.tel.ContextMask.addEventListener(      "contextmenu",      e => {        this.player.tel.ContextPanel.style.left = e.offsetX + "px";        this.player.tel.ContextPanel.style.top = e.offsetY + "px";        this.player.container.classList.add("player-contextmenu-show");        e.preventDefault() ? e.preventDefault() : (e.returnValue = false);      },      false    );    this.player.tel.ContextMask.addEventListener("click", () => {      this.player.container.classList.remove("player-contextmenu-show");    });  }}