export default class flash {  #option = null;  #el;  constructor(player) {    this.#option = player.option;    this.#el = player;    this.#option.flash.flashVars.src = this.#option.src;    this.FlashEvent = [      "rtmpConnection",      "defaultPlaybackRate",      "playbackRate",      "controls",      "defaultMuted"    ];    this.GetAndSet = [      "preload",      "autoplay",      "loop",      "volume",      "muted",      "rtmpStream",      "duration",      "mode",      "currentTime"    ];    this.getOnly = [      "autoplay",      "metadata",      "currentSrc",      "networkState",      "readyState",      "initialTime",      "startOffsetTime",      "paused",      "ended",      "videoWidth",      "videoHeight",      "buffered",      "bufferedBytesStart",      "bufferedBytesEnd",      "bytesTotal"    ];    this.startTimer = null;    let id = this.#option.flash.attributes.id;    let swfNum = Math.random()      .toString()      .slice(-6);    this.swfId = `${id}_${swfNum}`;    let swfId = this.swfId;    window[swfId] = window[swfId] || {};    window[swfId].Flash = window[swfId].Flash || {};    window[swfId].Flash.onReady = this.onReady;    window[swfId].Flash.onEvent = this.onEvent;    window[swfId].Flash.onError = this.onError;    window[swfId].Flash._self = this;    console.warn(this);    this.embed();  }  //判断打开flash  isOpenFlash() {    let Flash = false;    if (this.#el.browser.isMacOs) {      const swfflash = navigator.plugins["Shockwave Flash"];      if (swfflash) {        Flash = true;      }    } else {      try {        const swfflash = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");        if (swfflash) {          Flash = true;        }      } catch (e) {}    }    return Flash;  }  createFlash() {    const flashVars = Object.assign(this.#option.flash.flashVars, {      readyFunction: this.swfId + ".Flash.onReady",      eventProxyFunction: this.swfId + ".Flash.onEvent",      errorEventProxyFunction: this.swfId + ".Flash.onError",      autoplay: this.#option.autoplay,      preload: this.#option.preload,      loop: this.#option.loop,      muted: this.#option.muted,      volume: this.#option.volume    });    const params = Object.assign(this.#option.flash.params, {});    const attributes = Object.assign(this.#option.flash.attributes, {      id: this.swfId,      name: this.swfId    });    const dom = this.getEmbedCode(      this.#option.flash.swf,      flashVars,      params,      attributes    );    this.#el.tel.playerContainer.innerHTML = dom;    return this.#el.tel.playerContainer.childNodes[0];  }  getEmbedCode(swf, flashVars, params, attributes) {    const objTag = '<object type="application/x-shockwave-flash" ';    let flashVarsString = "";    let paramsString = "";    let attrsString = "";    if (flashVars) {      Object.getOwnPropertyNames(flashVars).forEach(function(key) {        flashVarsString += `${key}=${flashVars[key]}&amp;`;      });    }    params = Object.assign(params, {      movie: swf,      flashvars: flashVarsString    });    // Create param tags string    Object.getOwnPropertyNames(params).forEach(function(key) {      paramsString += `<param name="${key}" value="${params[key]}" />`;    });    attributes = Object.assign(attributes, {      data: swf    });    Object.getOwnPropertyNames(attributes).forEach(function(key) {      attrsString += `${key}="${attributes[key]}" `;    });    return `${objTag}${attrsString}>${paramsString}</object>`;  }  embed() {    if (this.isOpenFlash()) {      this.flash_el = this.createFlash();      this.init();    } else {      this.#el.event.emit("flasherror");    }  }  get FlashDom() {    return this.flash_el;  }  play() {    this.FlashDom.vjs_play();  }  pause() {    this.FlashDom.vjs_pause();  }  src(src) {    if (src) {      this.FlashDom.vjs_src(src);    }  }  setSrc(src) {}  load() {    this.FlashDom.vjs_load();  }  resume() {    this.FlashDom.vjs_resume();  }  stop() {    this.FlashDom.vjs_stop();  }  autoplay(Autoplay) {    this.FlashDom.vjs_autoplay(Autoplay);  }  createSetter(type) {    Object.defineProperty(this, type, {      get: function() {        return this.FlashDom.vjs_getProperty(type);      },      set: function(val) {        this.FlashDom.vjs_setProperty(type, val);      }    });  }  createGetter(type) {    Object.defineProperty(this, type, {      configurable: true,      enumerable: true,      get: function() {        return this.FlashDom.vjs_getProperty(type);      }    });  }  init() {    for (let i = 0; i < this.getOnly.length; i++) {      this.createGetter(this.getOnly[i]);    }    for (let i = 0; i < this.GetAndSet.length; i++) {      this.createSetter(this.GetAndSet[i]);    }  }  on() {    this.#el.event.on("playing", () => {      if (!this.startTimer) {        this.startTimer = setInterval(() => {          this.#el.event.emit("timeupdate");        }, 1000);      }    });    this.#el.event.on("pause", () => {      this.destroy();    });    this.#el.event.on("ended", () => {      this.destroy();      this.player.bar.setPlayed(0);    });  }  onReady(swfID) {    this._self.#el.event.emit("load");    this._self.on();  }  onEvent(swfID, eventName) {    const args = Array.prototype.slice.call(arguments, 2);    this._self.#el.event.emit(eventName, args);  }  onError(...arg) {    console.warn(...arg, "onError");  }  destroy() {    clearInterval(this.startTimer);    this.startTimer = null;  }}