export default class Event {  #events = {};  constructor() {    this.playeEvent = [      "abort",      "canplay",      "canplaythrough",      "durationchange",      "emptied",      "ended",      "error",      "loadeddata",      "loadedmetadata",      "loadstart",      "mozaudioavailable",      "pause",      "play",      "playing",      "progress",      "ratechange",      "seeked",      "seeking",      "stalled",      "suspend",      "timeupdate",      "volumechange",      "waiting"    ];    this.#events = {};  }  on(key, fn) {    if (!this.#events[key]) {      this.#events[key] = [];    }    if (typeof fn === "function") {      this.#events[key].push(fn);    }  }  emit() {    let key = Array.prototype.shift.call(arguments);    let funs = this.#events[key];    //如果没有订阅过消息，则return;    if (!funs || funs.length === 0) {      return;    }    funs.forEach(fun => {      fun.apply(this, arguments);    });  }  off(key, fn) {    if (key !== "undefined" && fn == "undefined") {      let funs = this.#events[key];      funs && (funs.length = 0);    }    if (key == "undefined" && fn == "undefined") {      for (let Key in this.#events) {        let eventFuns = this.#events[Key];        eventFuns && (eventFuns.length = 0);      }    }  }}