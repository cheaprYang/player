export default class Browser {  constructor() {    this.ua = navigator.userAgent;    this._init();  }  _init() {    const ua = this.ua;    const browsers =this.getBrowser();    const mobile = /Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(ua);    const system=this.getSystem();   console.warn(browsers,system)  }  getSystem() {    const ua = this.ua;    let system = '', osVersion = '';    const clientStrings = [      {        s: 'Windows 10',        r: /(Windows 10.0|Windows NT 10.0)/      },      {        s: 'Windows 8.1',        r: /(Windows 8.1|Windows NT 6.3)/      },      {        s: 'Windows 8',        r: /(Windows 8|Windows NT 6.2)/      },      {        s: 'Windows 7',        r: /(Windows 7|Windows NT 6.1)/      },      {        s: 'Windows Vista',        r: /Windows NT 6.0/      },      {        s: 'Windows Server 2003',        r: /Windows NT 5.2/      },      {        s: 'Windows XP',        r: /(Windows NT 5.1|Windows XP)/      },      {        s: 'Windows 2000',        r: /(Windows NT 5.0|Windows 2000)/      },      {        s: 'Windows ME',        r: /(Win 9x 4.90|Windows ME)/      },      {        s: 'Windows 98',        r: /(Windows 98|Win98)/      },      {        s: 'Windows 95',        r: /(Windows 95|Win95|Windows_95)/      },      {        s: 'Windows NT 4.0',        r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/      },      {        s: 'Windows CE',        r: /Windows CE/      },      {        s: 'Windows 3.11',        r: /Win16/      },      {        s: 'Android',        r: /Android/      },      {        s: 'Open BSD',        r: /OpenBSD/      },      {        s: 'Sun OS',        r: /SunOS/      },      {        s: 'Linux',        r: /(Linux|X11)/      },      {        s: 'iOS',        r: /(iPhone|iPad|iPod)/      }, {        s: 'Mac OS X',        r: /Mac OS X/      },      {        s: 'Mac OS',        r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/      },      {        s: 'QNX',        r: /QNX/      },      {        s: 'UNIX',        r: /UNIX/      },      {        s: 'BeOS',        r: /BeOS/      },      {        s: 'OS/2',        r: /OS\/2/      },      {        s: 'Search Bot',        r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/      }];    for (var id in clientStrings) {      var cs = clientStrings[id];      if (cs.r.test(ua)) {        system = cs.s;        break;      }    }    if (/Windows/.test(ua)) {      osVersion = /Windows (.*)/.exec(ua)[1];      system = 'Windows';    }    switch (system) {      case 'Mac OS X':        osVersion = /Mac OS X (10[\.\_\d]+)/.exec(ua)[1];        break;      case 'Android':        osVersion = /Android ([\.\_\d]+)/.exec(ua)[1];        break;      case 'iOS':        osVersion = /OS (\d+)_(\d+)_?(\d+)?/.exec(ua);        osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);        break;    }    return {      system,      osVersion    };  }  getBrowser(){    let browsername='',version='';    const ua=this.ua;    if (/Opera/.test(ua)){      browsername='Opera',version=ua.substring(ua.indexOf('Opera') + 6)      return {        browsername,        version      }    }    if (/OPR/.test(ua)){      browsername='Opera',version=ua.substring(ua.indexOf('OPR') + 5)      return {        browsername,        version      }    }    if (/MSIE/.test(ua)){      browsername='Microsoft Internet Explorer',version=ua.substring(ua.indexOf('MSIE') + 6)      return {        browsername,        version      }    }    if (/Trident/.test(ua)){      browsername='Microsoft Internet Explorer 11+',version=ua.substring(ua.indexOf('rv:') + 3);      return {        browsername,        version      }    }    if (/Chrome/.test(ua)){      browsername='Chrome',version=ua.substring(ua.indexOf('Chrome')+7).substring(0,7);      return {        browsername,        version      }    }    if (/Safari/.test(ua)){      browsername='Safari',version=ua.substring(ua.indexOf('Safari') + 6);      return {        browsername,        version      }    }  }}